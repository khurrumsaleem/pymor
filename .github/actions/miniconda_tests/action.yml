name: "Run tests in miniconda environment"

inputs:
  python:
    required: true
    type: string
  prefix:
    required: true
    type: string
  os:
    required: true
    type: string
  coverage_file:
    required: true
    type: string
  results_file:
    required: true
    type: string
runs:
  using: "composite"
  steps:
    - name: Install required X libs (Linux)
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0
    - name: Install
      shell: bash
      if: runner.os == 'Windows'
      run: |
        curl --output mesa.7z -L https://github.com/pal1000/mesa-dist-win/releases/download/20.3.4/mesa3d-20.3.4-release-msvc.7z
        7z x mesa.7z -omesa -y


        # The script requires user input (choice of options) so need to
        # fiddle to get it to run automatically. Not a clean way to do it,
        # but works.
        sed -i 's/@echo Please make a deployment choice:/@GOTO desktopgl/g' ./mesa/systemwidedeploy.cmd
        sed -i 's/@echo Desktop OpenGL drivers deploy complete./@exit/g' ./mesa/systemwidedeploy.cmd
        ./mesa/systemwidedeploy.cmd

    - uses: actions/checkout@v3
    - uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: pyMOR-ci
        miniforge-variant: Mambaforge
        use-mamba: true
        python-version: ${{ inputs.python }}
        channels: conda-forge
        channel-priority: true
        # This needs to be set for caching to work properly!
        use-only-tar-bz2: true
    - name: Cache conda
      uses: martijnhols/actions-cache@v3.0.11
      id: cache
      env:
        # Increase this value to reset cache if .ci/conda-env.yml have not changed
        CACHE_NUMBER: 2
      with:
        path: ${{ inputs.python }}
        key:
          ${{ runner.os }}-${{ inputs.python }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles('.ci/conda-env.yml') }}
    - name: Update environment
      shell: bash
      run: mamba env update -n pyMOR-ci -f .ci/conda-env.yml
      if: steps.cache.outputs.cache-hit != 'true'
    - name: Export Conda Env
      shell: bash -l {0}
      run: |
        mamba env export > conda-env__${{ runner.os }}-${{ inputs.python }}.yml
    - name: Install pyMOR
      shell: bash -l {0}
      # this seems to be the most portable way of making sure everything is importable
      run: conda develop .
      # alas it still does not work everywhere, so manual PYTHONPATH it is
    - name: Platform env
      shell: bash -l {0}
      run: |
        if [[ ${{ runner.os }} == Linux ]]; then
          echo "PYTEST_PREFIX=xvfb-run -a" >> $GITHUB_ENV
          echo "QT_API=pyside2" >> $GITHUB_ENV
        fi
        # windows currently segfaults in first QT+MPL plot otherwise
        if [[ ${{ runner.os }} == Windows ]]; then
          echo "QT_API=pyside2" >> $GITHUB_ENV
        fi
        echo "QT_DEBUG_PLUGINS=1" >> $GITHUB_ENV
        echo "PYMOR_VERSION=$(python -c 'import pymor;print(pymor.__version__)')" >> $GITHUB_ENV
    - name: Sanity check
      shell: bash -l {0}
      run: |
        ${PYTEST_PREFIX} python -c "from matplotlib.pyplot import *"
        ${PYTEST_PREFIX} python -c "from qtpy.QtGui import *"
        ${PYTEST_PREFIX} python -c "import OpenGL"
        ${PYTEST_PREFIX} python -c "import OpenGL.GL as gl"
    - name: Run pytest
      shell: bash -l {0}
      env:
        PYTHONPATH: ./src
        PYMOR_HYPOTHESIS_PROFILE: "ci"
        # we may be able to limit this to macos
        PYMOR_ALLOW_DEADLINE_EXCESS: 1
        COMMON_PYTEST_OPTS: "--cov-report= --cov --cov-config=setup.cfg --cov-context=test --junitxml=${{ inputs.results_file }}"
        COVERAGE_FILE: ${{ inputs.coverage_file }}
      run: |
        ${PYTEST_PREFIX} pytest ${COMMON_PYTEST_OPTS}
        # make sure to fail if there was an error collecting data
        coverage xml -o ${{ inputs.coverage_file }}.xml --fail-under=10
    - name: Upload Coverage XML
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: coverage_results
        path: ${{ inputs.coverage_file }}.xml
    - name: Upload Coverage RAW
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: coverage_results_raw
        path: ${{ inputs.coverage_file }}
    - name: Upload Unit Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: Unit Test Results (Python ${{ inputs.python }}, OS ${{ runner.os }})
        path: ${{ inputs.results_file }}
    - name: Upload Conda Env Export
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: Conda Env Exports
        path: conda-env__${{ runner.os }}-${{ inputs.python }}.yml